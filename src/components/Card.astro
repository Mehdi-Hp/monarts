---
import type { HTMLAttributes } from 'astro/types';

export namespace CardNS {
	export enum PunchPosition {
		X = 'x',
		Y = 'y'
	}
	export enum PunchSize {
		SM = 'sm',
		MD = 'md',
		LG = 'lg'
	}
	export enum Roundness {
		SM = 'sm',
		MD = 'md',
		LG = 'lg',
		XL = 'xl',
		XXL = 'xxl',
		XXXL = 'xxxl',
		FULL = 'full'
	}
	export enum Spacing {
		SM = 'sm',
		MD = 'md',
		LG = 'lg',
		NONE = 'none'
	}
	export enum Circular {
		HALF = 'half',
		FULL = 'full'
	}
}

export interface Props extends HTMLAttributes<'div'> {
	children: any;
	punch?: [
		(CardNS.PunchPosition.X | CardNS.PunchPosition.Y),
		(CardNS.PunchSize.SM | CardNS.PunchSize.MD | CardNS.PunchSize.LG)
	];
	roundness: CardNS.Roundness;
	circular?: CardNS.Circular;
	spacing: CardNS.Spacing;
	'content-class'?: string;
}

const { punch, roundness, circular, spacing, ...attributes } = Astro.props;
---

<div
	class:list={[
		'card',
		`punchPosition--${punch?.[0]}`,
		`punchSize--${punch?.[1]}`,
		`roundness--${roundness}`,
		`spacing--${spacing}`,
		`circular--${circular}`,
		attributes.class,
		attributes['class:list'],
		{ isPunched: !!punch }
	]}
	{...attributes}
>
	<div class:list={[
		'content',
		attributes['content-class'],
		attributes['content-class:list'],
	]}>
		<slot />
	</div>
</div>

<style>
.card {
	--card-punchSize: 0px;
	display: flex;
	justify-content: center;
	align-items: center;
	position: relative;
	filter: drop-shadow(1x 0.5x 0rem var(--aqua-dark));
	overflow: hidden;

	&:not(.isPunched) {
		background-color: var(--aqua-light);
	}
	&.isPunched {
		background:
			radial-gradient(circle var(--card-punchSize) at var(--card-punchPositionFirst) center, transparent var(--card-punchSize), var(--aqua-light) 0) var(--card-punchPositionFirst) center,
			radial-gradient(circle var(--card-punchSize) at var(--card-punchPositionSecond) center, transparent var(--card-punchSize), var(--aqua-light) 0) var(--card-punchPositionSecond) center;
		background-size: var(--card-BackgroundSize);
		background-repeat: no-repeat;
	}
	&.punchSize--sm {
		--card-punchSize: 1x;
	}
	&.punchSize--md {
		--card-punchSize: 3x;
	}
	&.punchSize--lg {
		--card-punchSize: 5x;
	}

	&.circular--full {

	}
	&.circular--half {
		background: linear-gradient(0deg, transparent 50%, var(--aqua-light) 50%);
	}

	&.punchPosition--x {
		--card-punchPositionFirst: left;
		--card-punchPositionSecond: right;
		--card-BackgroundSize: calc(100% - var(--card-punchSize)) 100%;
	}
	&.punchPosition--y {
		--card-punchPositionFirst: top;
		--card-punchPositionSecond: bottom;
		--card-BackgroundSize: 100% calc(100% - var(--card-punchSize));
	}

	&.spacing--sm {
		padding: calc(1x + var(--card-punchSize));
	}
	&.spacing--md {
		padding: calc(2x + var(--card-punchSize));
	}
	&.spacing--lg {
		padding: calc(4x + var(--card-punchSize));
	}

	&.roundness--sm {
		border-radius: 0.5x;
	}
	&.roundness--md {
		border-radius: 1x;
	}
	&.roundness--lg {
		border-radius: 2x;
	}
	&.roundness--xl {
		border-radius: 4x;
	}
	&.roundness--xxl {
		border-radius: 6x;
	}
	&.roundness--xxxl {
		border-radius: 9x;
	}
	&.roundness--full {
		border-radius: 100x;
	}
}

.background {
	position: absolute;
	inset: 0;
	width: 100%;
	height: 100%;
}

.backgroundReal {
	fill: var(--aqua-light);
}

.content {
	display: flex;
	flex-direction: column;
	justify-content: center;
	align-items: center;
	position: relative;
	align-items: center;
	z-index: 2;
}
</style>
